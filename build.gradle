buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
    }
}
import java.util.regex.Pattern
apply plugin: 'com.android.application'

project.ext {
    nativearch = "none";
    libdir = "none";
    eabi = "none";
}
project.ext {
    ndkDir = "/opt/android-ndk";
}

android {
    compileSdkVersion 19
    buildToolsVersion '22.0.1'

    sourceSets {
        main {
            /*manifest.srcFile 'src/archutils/Android/Framework/AndroidManifest.xml'
            res.srcDirs = ['src/archutils/Android/Framework/res']
            java.srcDirs = ['src/archutils/Android/Framework/java']
            resources.srcDirs = ['src/archutils/Android/Framework/resources']
            aidl.srcDirs = ['src/archutils/Android/Framework/aidl']
            renderscript.srcDirs = ['src/archutils/Android/Framework/renderscript']
            assets.srcDirs = ['src/archutils/Android/Framework/assets']*/
            setRoot('src/archutils/Android/Framework')
        }
    }
    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 19
        versionCode getVersionCodeFromManifest()
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        debug {
            // jniDebugBuild true
            minifyEnabled false
            debuggable true
        }
    }
    // From http://ph0b.com/android-studio-gradle-and-ndk-integration/
    productFlavors {
        x86 {
            versionCode Integer.parseInt("6" + defaultConfig.versionCode)
            project.ext.nativearch = "x86"
            project.ext.eabi = "x86"
            project.ext.libdir = "x86"
            ndk {
                abiFilter "x86"
            }
        }
        mips {
            versionCode Integer.parseInt("4" + defaultConfig.versionCode)
            project.ext.nativearch = "mips"
            project.ext.eabi = "mips"
            project.ext.libdir = "mips"
            /*ndk {
                abiFilter "mips"
            }*/
        }
        armv7 {
            versionCode Integer.parseInt("2" + defaultConfig.versionCode)
            project.ext.nativearch = "armv7-a"
            project.ext.eabi = "armeabi-v7a"
            project.ext.libdir = "armv7"
            ndk {
                abiFilter "armeabi-v7a"
            }
        }
        // No love for mips for now.
        /*
        mips {
            versionCode Integer.parseInt("4" + defaultConfig.versionCode)
                abiFilter "mips"
                project.ext.nativearch = "mips"
            }
        }
        */
        fat
    }
}
dependencies {
//    compile 'com.android.support:appcompat-v7:+'
//    compile 'com.google.android.gms:play-services:+'
//  the above will be replaced by the way more pure C++ libs.
}

def getVersionCodeFromManifest() {
    def manifestFile = file(android.sourceSets.main.manifest.srcFile)
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def matcher = pattern.matcher(manifestFile.getText())
    matcher.find()
    return Integer.parseInt(matcher.group(1))
}
